# Path to your oh-my-zsh installation.
  export ZSH=/home/$USER/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git git-hubflow osx tmux web-search python django)

# User configuration

  export PATH="/home/$USER/bin:/home/$USER/yes/bin:/home/$USER/bin:/home/$USER/yes/bin:/home/$USER/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


# zsh Rc additions
cd ~/;
source bin/activate;
cd quorum-site;

# set path
export EDITOR="vim"

restart_compilers () {
    echo "Restarting compilers..."
    # stylus
    ps ax | grep "$HOME/quorum-site/app/static/css" | awk {'print $1'}| xargs kill -9
    nohup stylus -w -m --out $HOME/quorum-site/app/static/css/ $HOME/quorum-site/app/static/stylus/ >/dev/null 2>&1 &
    # cjsx
    ps ax | grep "$HOME/quorum-site/app/static/jsx" | awk {'print $1'}| xargs kill -9
    nohup cjsx -o $HOME/quorum-site/app/static/jsx/ -wcb $HOME/quorum-site/app/static/cjsx/ >/dev/null 2>&1 &
    # coffee
    ps ax | grep "$HOME/quorum-site/app/static/cc" | awk {'print $1'}| xargs kill -9
    nohup coffee -o $HOME/quorum-site/app/static/cc/ -wc $HOME/quorum-site/app/static/coffee/  >/dev/null 2>&1 &
}

###########
# Styling #
###########

# configure colors
reset_color=`tput sgr0`;
green_color=`tput setaf 2`;
red_color=`tput setaf 1`;
purple_color=`tput setaf 5`;

# commands to print messages of different colors
green(){
    echo "${green_color}$1${reset_color}";
}
purple(){
    echo "${purple_color}$1${reset_color}";
}
red(){
    echo "${red_color}$1${reset_color}";
}

####################
# Useful Functions #
####################

# aliases for shell_plus
sp(){
 python manage.py shell_plus
}
shell(){
     python manage.py shell_plus;
}
# runserver
serve(){
    green "### Running Server on port $1...";
    sudo chown -R ubuntu *
    pkill -f $1
    python manage.py runserver 0.0.0.0:$1;
}
# parser
parse(){
 python manage.py parse $1
}

# for deleteing defunct / zombies
kill_zombies() {
    green "### You are now killing python zombies";
    for pid in $(ps -ef | awk '/defunct/ { print $3 }'); do
        kill "$pid";
    done;
    red "### Success: Zombies vanquished";
}

# wipe out swap files
ls_swp() {
    find . -name *swp
}

rm_swp() {
    find . -name *swp -delete;
}

# deployment
reset_remote () {
    # if no input arguments, use the current branch in git
    if [ $# -eq 0 ]
      then
        branchname=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
      else
        branchname=$1
    fi
    echo "Resetting remote to $branchname."
    sudo git clean -fdx
    sudo git reset --hard;
    sudo git fetch origin;
    sudo git checkout $branchname;
    sudo git reset --hard origin/$branchname;
    sudo chown -R $USER *;
    find . -name '*.pyc' -delete
}

#################
# Fun Functions #
#################

quorum_text () {
    echo "";
    purple " \$\$\$\$\$\$\\";
    purple "\$\$  __\$\$\\";
    purple "\$\$ /  \$\$ |\$\$\\   \$\$\\  \$\$\$\$\$\$\\   \$\$\$\$\$\$\\  \$\$\\   \$\$\\ \$\$\$\$\$\$\\\$\$\$\$\\";
    purple "\$\$ |  \$\$ |\$\$ |  \$\$ |\$\$  __\$\$\\ \$\$  __\$\$\\ \$\$ |  \$\$ |\$\$  _\$\$  _\$\$\\";
    purple "\$\$ |  \$\$ |\$\$ |  \$\$ |\$\$ /  \$\$ |\$\$ |  \\__|\$\$ |  \$\$ |\$\$ / \$\$ / \$\$ |";
    purple "\$\$ \$\$\\\$\$ |\$\$ |  \$\$ |\$\$ |  \$\$ |\$\$ |      \$\$ |  \$\$ |\$\$ | \$\$ | \$\$ |";
    purple "\\\$\$\$\$\$\$ / \\\$\$\$\$\$\$  |\\\$\$\$\$\$\$  |\$\$ |      \\\$\$\$\$\$\$  |\$\$ | \$\$ | \$\$ |";
    purple " \\___\$\$\$\\  \\______/  \\______/ \\__|       \\______/ \\__| \\__| \\__|";
    purple "     \\___|  * Data Driven Analytics | Dev Env for $USER *";
    echo "";
}
quorum_text

if [[ "$TMUX" == "" ]] &&
        [[ "$SSH_CONNECTION" != "" ]]; then
    # restart compilers
    restart_compilers

    # Attempt to discover a detached session and attach
    # it, else create a new session
    WHOAMI=$(whoami)
    if tmux has-session -t $WHOAMI 2>/dev/null; then
        tmux -2 attach-session -t $WHOAMI
    else
        tmux -2 \
            new-session -s $WHOAMI \; \
            # seems to cause weird problems
            #new-session -s $WHOAMI "vim" \; \
            #split-window "python manage.py runserver 8888" \; \
            #split-window -h "python manage.py shell_plus" \; \
            #select-pane -U \; \
            #resize-pane -D 10
    fi
fi
